import express from "express";
import {
    Client,
    GatewayIntentBits,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    PermissionsBitField,
} from "discord.js";
import dotenv from "dotenv";

dotenv.config();

// Criar servidor Express para evitar erro de "Port Scan Timeout" na Render
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
    res.send("Bot est√° rodando!");
});

app.listen(PORT, () => {
    console.log(`üåç Servidor HTTP rodando na porta ${PORT}`);
});

// Criar cliente do bot com intents ajustadas
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds, // Necess√°rio para intera√ß√µes e eventos b√°sicos
        GatewayIntentBits.GuildMessages, // Necess√°rio se o bot precisar ler mensagens
        GatewayIntentBits.GuildMessageReactions, // Caso precise de rea√ß√µes
    ],
});

client.once("ready", async () => {
    console.log(`‚úÖ Bot online como ${client.user.tag}`);
});

// IDs dos canais
const CHANNEL_SETUP_HOSPITAL = "1350125282933346360";

// Configura√ß√£o do hospital com permiss√µes e cores personalizadas
const HOSPITAL_ROLES = {
    "Diretor": { permissions: [PermissionsBitField.Flags.Administrator], color: "#FF0000" },
    "M√©dico": { permissions: [PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.ManageMessages], color: "#008000" },
    "Enfermeiro": { permissions: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel], color: "#00FFFF" },
    "Param√©dico": { permissions: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel], color: "#FFD700" },
    "Paciente": { permissions: [PermissionsBitField.Flags.ViewChannel], color: "#FFFFFF" }
};

const HOSPITAL_CATEGORIES = {
    "RECEP√á√ÉO": ["üí¨„Éªchat-visitante", "ü©∏„Éªrecrutamento", "üìÖ„Éªregistre-se"],
    "EXAMES": ["üìë„Éªagendamentos", "üìã„Éªagendados", "üß™„Éªtestegravidez", "üß¨„Éªtestedna"],
    "OBSTETR√çCIA": ["üìú„Éªcart√£o-gestante"],
    "ADO√á√ÉO": ["üíö„Éªquero-uma-fam√≠lia"],
    "PAIS-BEB√äS": ["üë∂„Éªregras-pais-beb√™s"],
    "DIVERSOS": ["üì∑„Éªinstagram"],
    "TICKETS": ["üé´„Éªabrir-ticket"]
};

client.on("interactionCreate", async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === "setup_hospital") {
        const guild = interaction.guild;
        
        await interaction.reply({ content: "üõ†Ô∏è Configurando o servidor para o hospital... Aguarde.", ephemeral: true });
        
        // Criando os cargos com permiss√µes e cores personalizadas
        for (const [roleName, roleData] of Object.entries(HOSPITAL_ROLES)) {
            if (!guild.roles.cache.find(role => role.name === roleName)) {
                await guild.roles.create({ name: roleName, permissions: roleData.permissions, color: roleData.color });
            }
        }

        // Criando categorias e canais com permiss√µes adequadas
        for (const [categoryName, channels] of Object.entries(HOSPITAL_CATEGORIES)) {
            const category = await guild.channels.create({
                name: `üìÇ„Éª${categoryName}`,
                type: 4
            });
            
            for (const channelName of channels) {
                await guild.channels.create({
                    name: channelName,
                    type: 0,
                    parent: category.id,
                    permissionOverwrites: Object.entries(HOSPITAL_ROLES).map(([roleName, roleData]) => {
                        const role = guild.roles.cache.find(r => r.name === roleName);
                        return role ? { id: role.id, allow: roleData.permissions } : null;
                    }).filter(Boolean)
                });
            }
        }

        await interaction.followUp("üè• Configura√ß√£o do hospital conclu√≠da com sucesso!");
    }
});

client.once("ready", async () => {
    try {
        const channel = await client.channels.fetch(CHANNEL_SETUP_HOSPITAL);
        if (!channel) {
            console.error(`‚ùå O canal com ID ${CHANNEL_SETUP_HOSPITAL} n√£o foi encontrado! Verifique se o bot tem acesso.`);
            return;
        }
        
        // Verifica se o bot tem permiss√£o de envio de mensagens no canal
        if (!channel.permissionsFor(client.user).has(PermissionsBitField.Flags.SendMessages)) {
            console.error("‚ùå O bot n√£o tem permiss√£o para enviar mensagens no canal especificado!");
            return;
        }
        
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("setup_hospital")
                .setLabel("üè• Configurar Hospital")
                .setStyle(ButtonStyle.Primary),
        );
        await channel.send({
            content: "Clique no bot√£o abaixo para configurar o hospital RP!",
            components: [row],
        });
    } catch (error) {
        console.error("‚ùå Erro ao acessar o canal do bot. Verifique as permiss√µes ou se o canal ainda existe.", error);
    }
});

// Logar o bot com token correto
if (!process.env.TOKEN) {
    console.error("‚ùå Token do bot n√£o foi encontrado. Verifique o arquivo .env ou as vari√°veis de ambiente.");
    process.exit(1);
}

client.login(process.env.TOKEN).catch(err => {
    console.error("‚ùå Erro ao logar o bot. Verifique se o token √© v√°lido e se as intents corretas est√£o ativadas no Discord Developer Portal.", err);
    process.exit(1);
});
